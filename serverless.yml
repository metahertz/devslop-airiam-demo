service: demo-service

provider:
  name: aws
  runtime: python3.8
  stage: dev
  version: 1
  region: eu-west-1
  memorySize: 128
  environment:
  custom:
    s3-bucket: "devslop-bucket"
plugins:
  - serverless-python-requirements
package:
  exclude:
    - node_modules/**
    - venv/**
    - .vscode/**

functions:
  test:
    role: myCustRoleUpdate3
    handler: functions/test.test
    environment:
    events:
    - http:
        path: test
        method: get
        cors:
          origin: '*'
          headers: # <-- Specify allowed headers
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Headers
            - Access-Control-Allow-Credentials
          allowCredentials: true

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.custom.s3-bucket}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"

      # Customize API Gateway responses to solve CORS headaches.
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    myCustRoleUpdate3:
      Type: AWS::IAM::Role
      Properties:
        Path: /my/cust/path/
        RoleName: myCustRoleUpdate3
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: demoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "UploadBucket"
# Print out the name of the bucket that is created
Outputs:
  UploadBucketName:
    Value:
      Ref: UploadBucket
